---
import type { HTMLTag, Polymorphic } from 'astro/types'
import type { CollectionEntry } from 'astro:content'
import { Image } from 'astro:assets'

import FormattedDate from '../FormattedDate.astro'
import Button from '../Button.astro'
import { cn } from '@/utils'

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
  post: CollectionEntry<'post'>
  detailed?: boolean
  class?: string
}

const {
  as: Tag = 'div',
  post: { data, slug, render },
  detailed = false,
  class: className
} = Astro.props
const postDate = data.updatedDate ?? data.publishDate

const { remarkPluginFrontmatter } = await render()
---

<li
  class={cn(
    'group/card flex flex-col relative rounded-2xl border border-border bg-background transition-colors ease-in-out px-5 py-3 hover:bg-primary-foreground',
    detailed && 'max-sm:px-4 sm:py-5',
    className
  )}
>
  <a
    class={cn(
      'group/link w-full flex flex-col transition-all hover:text-primary',
      !detailed && 'sm:flex-row',
      detailed && data.coverImage && 'max-md:pt-24'
    )}
    href={`/blog/${slug}`}
    data-astro-prefetch
  >
    {
      detailed && data.coverImage && (
        <Image
          src={data.coverImage.src}
          inferSize
          alt={data.coverImage.alt || data.title}
          class='cover-image absolute end-0 top-0 z-0 h-2/3 w-full rounded-2xl object-cover opacity-40 transition-opacity duration-300 group-hover/card:opacity-70 md:h-full md:w-3/5'
          loading='eager'
        />
      )
    }
    {!detailed && (
      <FormattedDate class='min-w-[95px] py-1 text-xs' date={postDate} />
    )}
    <Tag class='z-10 flex-grow'>
      <!-- 标题 -->
      <h2 class="flex items-center justify-between">
        <span class="flex-grow pr-2">{data.title}</span>
        <svg
          xmlns='http://www.w3.org/2000/svg'
          width='16'
          height='16'
          viewBox='0 0 24 24'
          fill='none'
          stroke-width='2.5'
          stroke-linecap='round'
          stroke-linejoin='round'
          class='stroke-muted-foreground group-hover/link:stroke-primary'
        >
          <line
            x1='5'
            y1='12'
            x2='19'
            y2='12'
            class='translate-x-4 scale-x-0 transition-all duration-300 ease-in-out group-hover/link:translate-x-1 group-hover/link:scale-x-100'
          ></line>
          <polyline
            points='12 5 19 12 12 19'
            class='translate-x-0 transition-all duration-300 ease-in-out group-hover/link:translate-x-1'
          ></polyline>
        </svg>
      </h2>
      
      <!-- 描述 -->
      {detailed && (
        <p class="text-xs mt-2 text-muted-foreground">
          {data.description}
        </p>
      )}
    </Tag>
  </a>
  
  <!-- 底部信息 -->
  {detailed && (
    <div class="mt-auto pt-4 flex justify-between items-end">
      <div class="text-xs text-muted-foreground">
        <div>Date: <FormattedDate class='min-w-[95px]' date={postDate} /></div>
        <div>Reading Time: {remarkPluginFrontmatter.minutesRead}</div>
      </div>
      {data.tags && (
        <ul class='text-bgColor flex flex-wrap gap-2 justify-end'>
          {data.tags.map((tag: string) => (
            <li>
              <Button title={tag} href={`/tags/${tag}`} style='pill' />
            </li>
          ))}
        </ul>
      )}
    </div>
  )}
</li>

<style>
  .cover-image {
    mask-image: linear-gradient(to right, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%);
    -ms-mask-image: -ms-linear-gradient(to right, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%);
    -webkit-mask-image: -webkit-linear-gradient(
      to right,
      rgba(0, 0, 0, 0) 0%,
      rgba(0, 0, 0, 1) 100%
    );
  }

  @media (max-width: 768px) {
    .cover-image {
      mask-image: linear-gradient(to top, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%);
      -ms-mask-image: -ms-linear-gradient(to top, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%);
      -webkit-mask-image: -webkit-linear-gradient(
        to top,
        rgba(0, 0, 0, 0) 0%,
        rgba(0, 0, 0, 1) 100%
      );
    }
  }
</style>
